module Tritium::Engines::Reference::Scope
  module NodeModules 
    module ActionMethods
      def insert_tag(tag_name, contents = "", attributes = {}, &block)
        if contents.is_a? Hash
          attributes = contents
          contents = ""
        end

        new_node = position_node(node, "<#{tag_name} />").first
        (new_node.inner_html = contents) if contents.size > 0
    
        # Merge doesn't work here, so we have to iterate... bullshit!
        attributes.each do |key, value|
          new_node.set_attribute(key.to_s, value.to_s) 
        end

        if block
          Tritium::Engines::Reference::Scope::Node.new(new_node, @root, self).instance_eval(&block)
        end
      end
  
      def insert(html)
        position_node(node, html)
      end
  
      def name(new_name = nil, &block)
        if new_name
          node.name = new_name
        end
        if block
          node.name = open_text_scope_with(node.name, &block)
        end
      end

      def remove
        @node.remove
      end
      
      def wrap(tag_name, attributes = {}, &block)
        wrap_node = @node.add_previous_sibling("<#{tag_name} />").first
        attributes.each do |key,val|
          if key.is_a? Symbol
            key = key.to_s
          end
          wrap_node[key] = val
        end
        wrap_node.add_child(@node)

        if block
          Tritium::Engines::Reference::Scope::Node.new(wrap_node, @root, self).instance_eval(&block)
        end
      end

      def move_to(selector, position = "bottom", &block)
        move(node, selector, position, false, &block)
      end
      
      def move_here(selector, position = "bottom", &block)
        move(selector, node, position, &block)
      end
      
      def move(what, to, position, use_what = true, &block)
        
        if what.is_a?(String)
          what = node.xpath(what).first
        end
        
        if to.is_a?(String)
          to = node.xpath(to).first
        end
        
        if to && what
          position_node(to, what, position)
        
          scope_uses = (use_what ? what : to)
          if block
            Tritium::Engines::Reference::Scope::Node.new(scope_uses, @root, self).instance_eval(&block)
          end
          what
        end
      end
      
      def copy_to(selector, position = "bottom", &block)
        move(node.dup, selector, position, &block)
      end
      
      def copy_here(selector, position = "bottom", &block)
        move(node.xpath(selector).first.dup, node, position, &block)
      end
    end
  end
end
