module Tritium::Engines::Reference::Scope
  module NodeModules 
    module ActionMethods
      def insert_tag(tag_name, contents = "", attributes = {}, &block)
        if contents.is_a? Hash
          attributes = contents
          contents = ""
        end

        new_node = position_node(node, "<#{tag_name} />").first
        (new_node.inner_html = contents) if contents.size > 0
    
        # Merge doesn't work here, so we have to iterate... bullshit!
        attributes.each do |key, value|
          new_node.set_attribute(key.to_s, value.to_s) 
        end

        if block
          Tritium::Engines::Reference::Scope::Node.new(new_node, @root, self).instance_eval(&block)
        end
      end
  
      def insert(html)
        position_node(node, html)
      end
  
      def name(new_name = nil, &block)
        if new_name
          node.name = new_name
        end
        if block
          node.name = open_text_scope_with(node.name, &block)
        end
      end

      def remove
        @node.remove
      end

      # TODO: HC implement 'map'
      def move_to(selector, position = "bottom", &block)
        #map = options[:map] || options["map"] || false

        if selector[0..1] ==  ".."
          move_to_node = node.xpath(selector).first
        else
          move_to_node = node.search(selector).first
        end

        return nil if move_to_node.nil?

        position_node(move_to_node, node, position)

        if block
          Tritium::Engines::Reference::Scope::Node.new(node, @root, self).instance_eval(&block)
        end
      end
    end
  end
end
