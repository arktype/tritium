module Tritium::Engines::Reference::Scope
  module NodeModules
    module SelectionMethods
      #
      # The select function is the primary way to organize your
      # script. It represents searching the Node scope its set
      # inside.
      #
      # When the select() is at the root of the document, it searches
      # the entire tree. However, when its nested, it only searches a
      # subtree of nodes.
      #
      #  select("head") {
      #    select("meta") {
      #      remove()
      #    }
      #  }
      #
      # @param [String] subtree_selector An XPath or CSS3 selector
      #
      # @yield [Scope::Node] A Node scope representing all of the matched elements
      # @return [nil]
      def select(selector, &block)
        child_nodeset = @node.xpath(selector)

        child_nodeset.each do |child_node|
          child_scope = Tritium::Engines::Reference::Scope::Node.new(child_node, @root, self)
          child_scope.instance_eval(&block)
        end
      end

      # This is a way to address a Node's attributes
      # for modification purposes. There are several different
      # ways to work with this method.
      #
      # Calling this will apply to *every* node in the Node.
      # Please use another select() if you'd like to only work
      # with nodes having a particular attribute.
      #
      # If you request an attribute that doesn't exist, it gets
      # created automatically. 
      #
      # You can yield to the attribute block and get an Attribute
      # scope, as described below.
      #
      # @example Changing <img> tags to <a> tags
      #  # Search the whole document for img tags
      #  select("img") {
      #     # Renames the tag
      #     name("a") 
      #     # Grab its src attribute (or create it)
      #     attribute("src") {
      #       # Open a [Scope::Text] for the name
      #       name {
      #         # Changes the name of the attribute from 'src' to 'href'
      #         set("href")
      #       }
      #       # Open a [Scope::Text] for the value
      #       value {
      #         # rewrites the value with the result of a url filter
      #         set(rewrite('link'))
      #       }
      #     }
      #  }
      #
      # *Note*: If you are trying to delete
      # attributes, you could have a massive inefficiency if 
      # you had a huge Node and then created-then-destroyed
      # attributes on all of them. Always select *only* nodes with the 
      # desired attribute before running this function.
      #
      # 
      #
      # @param [String] Name The name of the attribute
      #
      # @yield [Scope::Attribute] A found or newly created Attribute scope
      # @return [nil]
      def attribute(name, value = nil, &block)
        (node[name] = value.to_s) if value
        attribute_node = node.attributes[name]

        # If we don't have an attribute, make one!
        if attribute_node.nil?
          node[name] = ""
          attribute_node = node.attributes[name]
        end

        if block
          attribute_scope = Tritium::Engines::Reference::Scope::Attribute.new(attribute_node, @root, self)
          attribute_scope.instance_eval(&block)
        end
      end

      # This is the main way to get access to the inner HTML inside
      # of each of the nodes that are currently selected. 
      # 
      # Remember, if not used correctly, it can be very slow.
      # Only use in very small trees
      #
      # @example Changing the h1 tag to be a link to the root
      #  select("body") {
      #    select("h1") {
      #      text() {
      #        # Completely overwrites the original contents of ALL matching h1's
      #        set("<a href='/'>Moovweb!</a>")
      #      }
      #    }
      #  }
      #
      # @example Replacing only part of the HTML
      #  text() {
      #    # Will replace "Hampton Catlin" with "Hampton 'Amazing' Catlin"
      #    replace("Hampton Catlin", "Hampton 'Amazing' Catlin")
      #
      #    # if this found "Andrew 'Amazing' Farmer" it would replace it with "(Andrew is definitely not Amazing)"
      #    replace(/Andrew '([^']*)' Farmer/, '(Andrew is definitely not \1)')
      #    
      #  }
      #
      # *Note*: A better way to do the above, is to use the insert_tag method as its more efficient
      #
      # Learn more about text manipulation by referencing the [Scope::Text]
      #
      # @yield [Scope::Text] A text manipulation scope that is raw html
      # @return [nil]
      def text(&block)
        if block
          node.inner_html = open_text_scope_with(node.inner_html, &block)
        end
      end
      alias html text
    end
  end
end
