{"asset":["\u003cimg id=\"desktop_img\" src=\"desktop_src.com\" /\u003e","# You would use this when the desktop server has an incorrect content-type in their Response Header that needs to be fixed in order to be parsed correctly. Because we match what tritium is applied using the content type. \nhtml() {\n  $(\".//img[@id='desktop_img']\"){\n    attribute(\"src\", asset(\"/images/moovweb_src\"))\n  }\n}","simple-mobile"],"bm":["\u003cdiv\u003e\u003c/div\u003e","# You would use this when the desktop server has an incorrect content-type in their Response Header that needs to be fixed in order to be parsed correctly. Because we match what tritium is applied using the content type. \nhtml() {\n  # bm(\"Time it took to run the html() scope in main.ts\")\n}","simple-mobile"],"export":["\u003cdiv\u003e\u003c/div\u003e","# You would use this when the desktop server has an incorrect content-type in their Response Header that needs to be fixed in order to be parsed correctly. Because we match what tritium is applied using the content type. \nhtml() {\n    export(\"Content-Type\",\"text/html\")\n}","simple-mobile"],"match":["\u003cdiv id=\"my_div\"\u003e\u003c/div\u003e","# Test added because the Reference engine gave an 'add_previous_sibling' error\nhtml() {\n  $name = fetch(\".//div[@id='my_div']/@id\")\n  match($name, \"my_div\"){\n      log(\"We reached my div!\")\n  }\n}","simple-mobile"],"match2":["\u003cdiv id=\"my_div\"\u003e\u003c/div\u003e","# Test added because the Reference engine gave an 'add_previous_sibling' error\nhtml() {\n  $name = fetch(\".//div[@id='my_div']/@id\")\n  match($name, /my_div/){\n      log(\"We reached my div!\")\n  }\n}","simple-mobile"],"match_not":["\u003cdiv id=\"my_div\"\u003e\u003c/div\u003e","# Test added because the Reference engine gave an 'add_previous_sibling' error\nhtml() {\n  $name = fetch(\".//div[@id='my_div']/@id\")\n  match_not($name, \"my_div\"){\n      log(\"We reached my div!\")\n  }\n  log(\"It should not say \\\"We reached my div!\\\" above this log.\")\n}","simple-mobile"],"match_not2":["\u003cdiv id=\"my_div\"\u003e\u003c/div\u003e","# Test added because the Reference engine gave an 'add_previous_sibling' error\nhtml() {\n  $name = fetch(\".//div[@id='my_div']/@id\")\n  match_not($name, /my_div/){\n      log(\"We reached my div!\")\n  }\n  log(\"It should not say \\\"We reached my div!\\\" above this log.\")\n}","simple-mobile"],"multi":["\u003cdiv id='polar_bear'\u003e\u003c/div\u003e","# Test added because the Reference engine gave an 'add_previous_sibling' error\nhtml() {\n  $(\".//div[@id='polar_bear']\") {\n    log(\"hey\")\n\u0009\u0009$name = fetch(\"./@id\")\n\u0009\u0009$name = concat(\"p\",\"p\",$name)\n\u0009\u0009attribute(\"name\", $name)\n\u0009\u0009export(\"Content-Type\",\"silly\")\n  }\n}","simple-mobile"],"time":["\u003cdiv id=\"my_div\"\u003e\u003c/div\u003e","html_fragment() {\n  $$(\"#my_div\") {\n  }\n  time()\n  log(\"Try log(time()) to see how long this code block took to run!\")\n}","simple-mobile"],"var":["\u003cdiv id=\"my_div\"\u003e\u003c/div\u003e","html_fragment() {\n  $$(\"#my_div\") {\n    var(\"variable\", \"Am I set?\")\n    log($variable)\n  }\n}","simple-mobile"]}