// Code generated by protoc-gen-go.
// source: object.proto
// DO NOT EDIT!

package proto

import proto1 "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto1.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type ScriptObject struct {
	Name             *string      `protobuf:"bytes,1,opt,name=name,def=main" json:"name,omitempty"`
	Root             *Instruction `protobuf:"bytes,2,opt,name=root" json:"root,omitempty"`
	Functions        []*Function  `protobuf:"bytes,3,rep,name=functions" json:"functions,omitempty"`
	ScopeTypeId      *int32       `protobuf:"varint,4,opt,name=scope_type_id" json:"scope_type_id,omitempty"`
	Linked           *bool        `protobuf:"varint,5,opt,name=linked" json:"linked,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (this *ScriptObject) Reset()         { *this = ScriptObject{} }
func (this *ScriptObject) String() string { return proto1.CompactTextString(this) }
func (*ScriptObject) ProtoMessage()       {}

const Default_ScriptObject_Name string = "main"

func (this *ScriptObject) GetName() string {
	if this != nil && this.Name != nil {
		return *this.Name
	}
	return Default_ScriptObject_Name
}

func (this *ScriptObject) GetRoot() *Instruction {
	if this != nil {
		return this.Root
	}
	return nil
}

func (this *ScriptObject) GetScopeTypeId() int32 {
	if this != nil && this.ScopeTypeId != nil {
		return *this.ScopeTypeId
	}
	return 0
}

func (this *ScriptObject) GetLinked() bool {
	if this != nil && this.Linked != nil {
		return *this.Linked
	}
	return false
}

func init() {
}
